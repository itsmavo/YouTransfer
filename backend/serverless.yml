

service: youtransfer-backend

frameworkVersion: "3"

plugins:
  - serverless-iam-roles-per-function

package:
  individually: true
  patterns:
    - '!venv/**'

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-west-1
  tracing:
    lambda: true
    apiGateway: true
  environment:
    BUCKET_NAME: !Ref NewResource
    BASE_URL: https://${self:custom.domainName}
    POWERTOOLS_SERVICE_NAME: youtransfer
    POWERTOOLS_METRICS_NAMESPACE: youtransfer

  httpApi:
    authorizers:
      jwtAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: !Sub 'https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolIdParameter}'
        audience:
          - !Ref UserPoolClientIdParameter
        type: jwt


custom:
  domainName: you-tr.click


functions:
  createShare:
    handler: share-handler.handleEvent
    events:
      - httpApi:
          method: POST
          path: "/"
          authorizer: 
            name: jwtAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: 
          - !Sub "arn:aws:s3:::${NewResource}/shares/*"
          - !Sub "arn:aws:s3:::${NewResource}"

  download:
    handler: download.handleEvent
   # layers:
     # - arn:aws:lambda:eu-west-1:866106556723:layer:Node-Configjs_backend:1
    events:
      - httpApi:
          method: GET
          path: "/{id}"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: 
          - !Sub "arn:aws:s3:::${NewResource}/shares/*"
          - !Sub "arn:aws:s3:::${NewResource}"

resources:
  Parameters:
    UserPoolClientIdParameter:
      Type: AWS::SSM::Parameter::Value<String>
      Default: /youtransfer/${sls:stage}/userPoolClientId
    UserPoolIdParameter:
      Type: AWS::SSM::Parameter::Value<String>
      Default: /youtransfer/${sls:stage}/userPoolId
    

  Resources:
    CustomDomainPathMapping:
      Type: AWS::ApiGatewayV2::ApiMapping
      Properties:
        ApiId: !Ref HttpApi
        ApiMappingKey: 'share'
        DomainName: ${self:custom.domainName}
        Stage: !Ref HttpApiStage
            
    NewResource:
      Type: 'AWS::S3::Bucket'
      DeletionPolicy: Retain
      Properties:
        BucketName: ${file(./unique-bucket-name.cjs):bucketName}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        NotificationConfiguration:
          EventBridgeConfiguration:
            EventBridgeEnabled: true

